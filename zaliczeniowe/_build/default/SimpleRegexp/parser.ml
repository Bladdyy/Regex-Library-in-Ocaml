type token =
  | CHAR of (char)
  | UNION
  | CONCAT
  | STAR
  | EMPTY
  | EPSILON
  | LPAR
  | RPAR
  | EOF
  | BADTOK

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  258 (* UNION *);
  259 (* CONCAT *);
  260 (* STAR *);
  261 (* EMPTY *);
  262 (* EPSILON *);
  263 (* LPAR *);
  264 (* RPAR *);
    0 (* EOF *);
  265 (* BADTOK *);
    0|]

let yytransl_block = [|
  257 (* CHAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\003\000\003\000\003\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\004\000\003\000\000\000\010\000\000\000\
\000\000\000\000\000\000\009\000\001\000\000\000\005\000\000\000\
\000\000"

let yydgoto = "\002\000\
\007\000\014\000"

let yysindex = "\255\255\
\003\255\000\000\000\000\000\000\000\000\003\255\000\000\013\000\
\017\255\003\255\003\255\000\000\000\000\032\255\000\000\025\255\
\032\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\005\000\
\003\000"

let yygindex = "\000\000\
\000\000\006\000"

let yytablesize = 276
let yytable = "\001\000\
\008\000\000\000\007\000\003\000\006\000\000\000\008\000\004\000\
\005\000\006\000\000\000\009\000\013\000\000\000\000\000\016\000\
\017\000\003\000\010\000\011\000\012\000\004\000\005\000\006\000\
\015\000\003\000\000\000\011\000\012\000\004\000\005\000\006\000\
\003\000\000\000\000\000\012\000\004\000\005\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\007\000\007\000\006\000\000\000\
\008\000\000\000\007\000\000\000\006\000\003\000\010\000\011\000\
\012\000\004\000\005\000\006\000"

let yycheck = "\001\000\
\000\000\255\255\000\000\001\001\000\000\255\255\001\000\005\001\
\006\001\007\001\255\255\006\000\000\000\255\255\255\255\010\000\
\011\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\001\001\255\255\255\255\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\002\001\003\001\002\001\255\255\
\008\001\255\255\008\001\255\255\008\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001"

let yynames_const = "\
  UNION\000\
  CONCAT\000\
  STAR\000\
  EMPTY\000\
  EPSILON\000\
  LPAR\000\
  RPAR\000\
  EOF\000\
  BADTOK\000\
  "

let yynames_block = "\
  CHAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 20 "SimpleRegexp/parser.mly"
                                    ( _1 )
# 159 "SimpleRegexp/parser.ml"
               : char SimpleRegexpDef.reg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 23 "SimpleRegexp/parser.mly"
                                    ( Lit _1 )
# 166 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    Obj.repr(
# 24 "SimpleRegexp/parser.mly"
                                    ( Eps )
# 172 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    Obj.repr(
# 25 "SimpleRegexp/parser.mly"
                                    ( Empty )
# 178 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 26 "SimpleRegexp/parser.mly"
                                    ( _2 )
# 185 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 're) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 're) in
    Obj.repr(
# 27 "SimpleRegexp/parser.mly"
                                    ( Or (_1, _3) )
# 193 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 're) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 're) in
    Obj.repr(
# 28 "SimpleRegexp/parser.mly"
                                    ( Concat (_1, _3) )
# 201 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 're) in
    Obj.repr(
# 29 "SimpleRegexp/parser.mly"
                                    ( Concat (_1, _2) )
# 209 "SimpleRegexp/parser.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 30 "SimpleRegexp/parser.mly"
                                    ( Star _1 )
# 216 "SimpleRegexp/parser.ml"
               : 're))
(* Entry regex *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let regex (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : char SimpleRegexpDef.reg)
